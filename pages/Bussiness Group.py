import streamlit as st
import requests
from constants import getTimestamp, getdata
import heapq
import matplotlib.pyplot as plt
from matplotlib.patches import Circle
import plotly.graph_objects as go
from plotly.subplots import make_subplots

st.set_page_config(
    layout="wide",
    initial_sidebar_state="expanded",
    )

def plot_revenue(data):
    num_business_units = len(data)

    # Create a subplot layout with one plot per business unit
    fig = make_subplots(
        rows=1, cols=num_business_units,
        subplot_titles=[f"Business Unit {i+1}" for i in range(num_business_units)]
    )

    # Colors for each business unit
    colors = ['#2196F3', '#4CAF50', '#FF9800', '#9C27B0', '#FFC107', '#00BCD4', '#795548', '#607D8B']

    # Plot each business unit
    for i, d in enumerate(data):
        x_values = list(range(len(d)))

        # Add the line plot with shaded area
        fig.add_trace(
            go.Scatter(
                x=x_values,
                y=d,
                mode='lines',
                line=dict(color=colors[i], width=2),
                fill='tozeroy',  # Fill area under the line
                fillcolor=f"rgba({int(colors[i][1:3], 16)}, {int(colors[i][3:5], 16)}, {int(colors[i][5:], 16)}, 0.3)",
                name=f"Business Unit {i+1}"
            ),
            row=1, col=i+1
        )

    # Consistent y-axis limits
    max_y = max([max(bu) for bu in data]) * 1.1
    for i in range(1, num_business_units + 1):
        fig.update_yaxes(range=[0, max_y], title="Revenue", row=1, col=i)
        fig.update_xaxes(title="Time", row=1, col=i)

    # Customize layout with default Plotly styles
    fig.update_layout(
        title="Revenue Generated by Business Units Over Time",
        height=500,  # Increase height for better display
        width=600 * num_business_units,  # Dynamically adjust width for more space
        template="plotly_dark"  # Use dark mode theme
    )

    return fig




    
def plot_higest_revenue(revenue, identifier, m):
    # Reduced size of the figure, keeping it proportional
    fig, ax = plt.subplots(figsize=(3, 3), facecolor='none')  # Adjusted figsize to reduce size
    ax.set_xlim(-1, 1)
    ax.set_ylim(-1, 1)
    
    # Draw a circle in the middle
    circle = Circle((0, 0.5), 0.4, edgecolor='#2596be', facecolor='none', linewidth=6)
    ax.add_artist(circle)
    
    # Add identifier text
    ax.text(
        0, 0.5, identifier, 
        fontsize=12, ha='center', va='center', color='#2596be', style='italic', weight='bold'
    )
    
    # Add revenue text
    ax.text(
        0, -0.2, f"Revenue: {revenue}", 
        fontsize=10, ha='center', va='center', color='white', style='italic', weight='bold'
    )

    # Add month text
    ax.text(
        0, -0.4, f"Month: {m}", 
        fontsize=10, ha='center', va='center', color='white', style='italic', weight='bold'
    )    
    
    # Hide the axis
    ax.axis('off')

    # Remove background and extra padding
    fig.patch.set_alpha(0)
    
    # Tight layout to reduce any extra space
    plt.tight_layout(pad=0.1)  # Minimized padding

    return fig


def main():
    # Adjust global Streamlit styling
    st.markdown("""
    <style>
        .block-container {
            padding-top: 1rem; /* Reduce top padding */
            padding-bottom: 0rem;
        }
        .css-1v3fvcr {
            margin-top: 0rem;
            margin-bottom: 0rem;
        }
    </style>
    """, unsafe_allow_html=True)

    st.title("Business Group Dashboard")
    
    # Validate session state
    if "temporal_graph" not in st.session_state:
        st.error("No Temporal Graph found in the session state. Please run the main script first.")
        return

    highest_business_group = []  # Heap to store the highest business groups
    revenue_of_business_group_across_time = []
    totalTimeStamps = len(st.session_state.temporal_graph.files)
    
    for time in range(totalTimeStamps):
        url_data = requests.get(st.session_state.temporal_graph.files[time])
        if url_data.status_code != 200:
            st.error("Failed to load data from the server.")
            return
            
        data = url_data.json()
        business_nodes = data["node_values"]["BUSINESS_GROUP"]
        
        for i in range(len(business_nodes)):
            heapq.heappush(highest_business_group, (-business_nodes[i][-2], business_nodes[i][-1], time))
            if len(highest_business_group) > 3:
                heapq.heappop(highest_business_group)

            if len(revenue_of_business_group_across_time) < i + 1:
                revenue_of_business_group_across_time.append([])

            revenue_of_business_group_across_time[i].append(business_nodes[i][-2])
    
    # Display the top 3 business groups in columns
    cols = st.columns(len(highest_business_group))
    for i in range(len(highest_business_group)):
        revenue, identifier, month_index = heapq.heappop(highest_business_group)
        fig2 = plot_higest_revenue(-revenue, identifier, month_index)
        with cols[i]:
            st.pyplot(fig2)
    
    fig1 = plot_revenue(revenue_of_business_group_across_time)
    st.plotly_chart(fig1, use_container_width=True)




    
if __name__ == "__main__":
    main()