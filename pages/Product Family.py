import streamlit as st
import requests
import matplotlib.pyplot as plt
from matplotlib.patches import Circle
import pandas as pd

st.set_page_config(
    layout="wide",
    initial_sidebar_state="expanded",
    )

def plot_revenue(data):
    """
    Plot revenue data for multiple business units over time.

    Args:
    data (dict): A dictionary where keys are business unit names and values are lists of revenue over time.
    """
    # Number of business units
    business_units = list(data.keys())
    num_business_units = len(business_units)

    # Create a figure and subplots dynamically based on the number of business units
    if num_business_units == 1:
        fig, ax = plt.subplots(figsize=(12, 6))
        axs = [ax]  # Wrap single subplot into a list for consistency
    else:
        fig, axs = plt.subplots(1, num_business_units, figsize=(6 * num_business_units, 6))
        if isinstance(axs, plt.Axes):  # Handle case where axs is a single Axes object
            axs = [axs]

    # Colors for the plots (cyclic if there are more units than colors)
    colors = ['#2196F3', '#4CAF50', '#FF9800', '#9C27B0', '#FFC107', '#00BCD4', '#795548', '#607D8B']
    
    # Plot each business unit's data
    for i, (business_unit, revenues) in enumerate(data.items()):
        # Access the subplot
        ax = axs[i]
        
        # Create the line plot with shading
        ax.fill_between(range(len(revenues)), revenues, alpha=0.3, color=colors[i % len(colors)])
        ax.plot(range(len(revenues)), revenues, color=colors[i % len(colors)], linewidth=2)
        
        # Customize the subplot
        ax.set_title(f"{business_unit}", fontsize=12, pad=10)
        ax.set_xlabel("Time", fontsize=10)
        ax.set_ylabel("Revenue", fontsize=10)
        ax.grid(True, alpha=0.3)
        
        # Set consistent y-axis limits across all subplots
        max_revenue = max(max(revenues) for revenues in data.values())
        ax.set_ylim(0, max_revenue * 1.1)

    # Adjust layout for multiple subplots
    plt.tight_layout()

    # Add a main title
    fig.suptitle('Revenue Generated by Prodcut Family Over Time', fontsize=16, y=1.02)

    return fig
    



def plot_higest_revenue(revenue, identifier,q):

    fig, ax = plt.subplots(figsize=(4, 4), facecolor='none')
    ax.set_xlim(-1, 1)
    ax.set_ylim(-1, 1)
    
    circle = Circle((0, 0.5), 0.4, edgecolor='#2596be', facecolor='none', linewidth=6)
    ax.add_artist(circle)
    
    ax.text(
        0, 0.5, identifier, 
        fontsize=16, ha='center', va='center', color='#2596be', style='italic', weight='bold'
    )
    
    ax.text(
        0, -0.2, f"Revenue : {revenue}", 
        fontsize=12, ha='center', va='center', color='white', style='italic', weight='bold'
    )

    ax.text(
        0, -0.4, f"Quarter : {q}", 
        fontsize=12, ha='center', va='center', color='white', style='italic', weight='bold'
    )    
    
    ax.axis('off')
    fig.patch.set_alpha(0)

    return fig

def main():
    if "temporal_graph" not in st.session_state:
        st.error("No Temporal Graph found in the session state. Please run the main script first.")
        return
    
    totalTimeStamps=len(st.session_state.temporal_graph.files)

    revenue_of_product_offering_across_time = {}

    for time in range(totalTimeStamps) :

        url_data = requests.get(st.session_state.temporal_graph.files[time])
        if url_data.status_code != 200:
            st.error("Failed to load data from the server.")
            return
        data = url_data.json()

        PRODUCT_FAMILY = data["node_values"]["PRODUCT_FAMILY"]

        for i in range(len(PRODUCT_FAMILY)) :
            if PRODUCT_FAMILY[i][1] not in revenue_of_product_offering_across_time :
                revenue_of_product_offering_across_time[PRODUCT_FAMILY[i][1]] = []

            revenue_of_product_offering_across_time[PRODUCT_FAMILY[i][1]].append(PRODUCT_FAMILY[i][-2])

    highest_quarterly_revenue = [0] * len(revenue_of_product_offering_across_time)
    highest_quarterly_revenue_product_group = [""] * len(revenue_of_product_offering_across_time)

    for k,v in revenue_of_product_offering_across_time.items() :
        s1 = sum(v[:3]) / 3
        s2 = sum(v[3:6]) / 3
        s3 = sum(v[6:9]) / 3
        s4 = sum(v[9:]) / 3

        if s1 > highest_quarterly_revenue[0] :
            highest_quarterly_revenue[0] = s1
            highest_quarterly_revenue_product_group[0] = k

        if s2 > highest_quarterly_revenue[1] :
            highest_quarterly_revenue[1] = s2
            highest_quarterly_revenue_product_group[1] = k

        if s3 > highest_quarterly_revenue[2] :
            highest_quarterly_revenue[2] = s3
            highest_quarterly_revenue_product_group[2] = k

        if s4 > highest_quarterly_revenue[3] :
            highest_quarterly_revenue[3] = s4
            highest_quarterly_revenue_product_group[3] = k

    cols = st.columns(4)

    for i in range(len(highest_quarterly_revenue)) :
        revenue, identifier = highest_quarterly_revenue[i], highest_quarterly_revenue_product_group[i]
        fig = plot_higest_revenue(revenue, identifier, i+1)
        with cols[i]:
            st.pyplot(fig)

    fig = plot_revenue(revenue_of_product_offering_across_time)
    st.pyplot(fig)
    
if __name__ == "__main__":
    main()